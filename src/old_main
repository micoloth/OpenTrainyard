use bevy::{log, transform};
use bevy::log::{Level, LogSettings};
use bevy::prelude::*;
use bevy::prelude::Vec3;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::process::Child;
// use bevy::ecs::schedule::StateData;
use bevy::prelude::Vec2;
use bevy::core::FixedTimestep;  // 0.9: Thi is in Time, not in core
use bevy::math::Vec3Swizzles;
use bevy::prelude::Component;
use std::fmt::{self, Display, Formatter};
use std::ops::{Add, Sub};

mod simulator;
use simulator::*;

// mod map_printer;
// use map_printer::*;
// use map_printer::add_color_minitiles;

// REMEMBER: with >> inster() <<, YOU CAN ALWAYS INSERT A COMPONENT, EVEN IF IT IS NOT PRESENT IN THE ENTITY !!! IT's PURPOSEFULLY VERY SIMPLE !!!


mod tests_;
use tests_::test;




/////////////////////////////////////////////////////////////////////////////////////
// COMPONENTS
/////////////////////////////////////////////////////////////////////////////////////

use bevy::prelude::*;
use bevy::ecs::system::EntityCommands;

// use staticvec::{staticvec, StaticVec};






/////////////////////////////////////////////////////////////////////////////////////
// SYSTEMS HELPER FUNCTIONS
/////////////////////////////////////////////////////////////////////////////////////

// Translates a mouse position to board coordinates












/////////////////////////////////////////////////////////////////////////////////////
// SYSTEMS
/////////////////////////////////////////////////////////////////////////////////////






#[allow(clippy::type_complexity)]
fn input_handler(
    button_colors: Res<ButtonColors>,
    mut interaction_query: Query<(&Interaction, &ButtonAction, &mut UiColor),(Changed<Interaction>, With<Button>)>,
    mut state: ResMut<State<AppState>>,
) {
    for (interaction, action, mut color) in interaction_query.iter_mut() {
        match *interaction {
            Interaction::Clicked => {
                *color = button_colors.pressed.into();
                match action {
                    ButtonAction::Clear => {
                        log::debug!("clearing detected");
                        if state.current() == &AppState::InGame {
                            log::info!("clearing game");
                            state.set(AppState::Out).unwrap();
                        }
                    }
                    ButtonAction::Generate => {
                        log::debug!("loading detected");
                        if state.current() == &AppState::Out {
                            log::info!("loading game");
                            state.set(AppState::InGame).unwrap();
                        }
                    }
                }
            }
            Interaction::Hovered => {
                *color = button_colors.hovered.into();
            }
            Interaction::None => {
                *color = button_colors.normal.into();
            }
        }
    }
}





fn setup_static_resources(mut commands: Commands, asset_server: Res<AssetServer>, ) {
    let assets = get_assets_in_a_hashmap(&asset_server);
    setup_ui(&mut commands, &asset_server, &assets);
    commands.insert_resource(get_BoardOptionsDefault());
    commands.insert_resource(get_TicksInATickDefault());
    commands.insert_resource(get_train_assets(&asset_server));
    commands.insert_resource(assets);
}

fn setup_game_state(mut state: ResMut<State<AppState>>){ 
    state.set(AppState::InGame).unwrap();  // Launch game
}
fn setup_camera(mut commands: Commands) {
    commands.spawn_bundle(OrthographicCameraBundle::new_2d());  // 2D orthographic camera
    commands.spawn_bundle(UiCameraBundle::default());  // UI Camera
}


fn main() {
    
    
    test();


    let mut app = App::new();
    app
    .insert_resource(WindowDescriptor { title: "Mine Sweeper!".to_string(), width: 700., height: 750., ..Default::default() }) // Window setup
    .insert_resource(LogSettings { level: Level::INFO, ..Default::default() }) // Log setup
    .add_plugins(DefaultPlugins) // Bevy default plugins
    .add_startup_system(setup_camera) // Startup system (cameras)
    .add_startup_system(setup_game_state) // Startup system (game state)
    .add_startup_system(setup_static_resources)
    .add_system_set(SystemSet::on_enter(AppState::InGame).with_system(create_board),)
    .add_system_set(SystemSet::on_exit(AppState::InGame).with_system(cleanup_board),)
    .add_system(input_handler) // State handling
    .add_system(scrollbar_input_handler) // State handling
    .add_system(scrollbar_dragging_handler) // State handling
    .add_system(spawn_tile) // State handling
    .add_system(logic_tick_event) // State handling
    .add_event::<TileSpawnEvent>()
    .add_event::<LogicTickEvent>()
    .add_state(AppState::Out)
    .add_system_set(
        SystemSet::new()
        .with_run_criteria(FixedTimestep::step(TIME_STEP as f64))
        .with_system(check_mouse_action)
        .with_system(move_trains)   
    )
    .run(); // Run the app




}


